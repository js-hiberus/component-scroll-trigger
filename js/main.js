// ===== ARCHIVO PRINCIPAL - INICIALIZACI√ìN Y COORDINACI√ìN =====

/**
 * Funci√≥n principal de inicializaci√≥n
 */
function inicializarAplicacion() {
  console.log("üöÄ === INICIANDO APLICACI√ìN SCROLL CINEM√ÅTICO ===");
  
  // Verificar que todos los elementos DOM necesarios est√©n disponibles
  if (!verificarElementosDOM()) {
    console.error("‚ùå Error: Elementos DOM requeridos no encontrados");
    return;
  }
  
  // Inicializar m√≥dulos en orden espec√≠fico
  inicializarModulos();
  
  // Configurar eventos del sistema
  configurarEventosSistema();
  
  console.log("‚úÖ Aplicaci√≥n inicializada correctamente");
  console.log("=" .repeat(50));
}

/**
 * Verificar que todos los elementos DOM necesarios est√©n disponibles
 */
function verificarElementosDOM() {
  const elementosRequeridos = [
    { elemento: ELEMENTS.piramide, nombre: 'piramide' },
    { elemento: ELEMENTS.monitor, nombre: 'monitor' },
    { elemento: ELEMENTS.scrollZone, nombre: 'scroll-zone' }
  ];
  
  let todosDisponibles = true;
  
  elementosRequeridos.forEach(({ elemento, nombre }) => {
    if (!elemento) {
      console.error(`‚ùå Elemento DOM requerido no encontrado: ${nombre}`);
      todosDisponibles = false;
    } else {
      console.log(`‚úÖ Elemento DOM encontrado: ${nombre}`);
    }
  });
  
  return todosDisponibles;
}

/**
 * Inicializar todos los m√≥dulos en el orden correcto
 */
function inicializarModulos() {
  console.log("üîß Inicializando m√≥dulos...");
  
  // 1. Inicializar monitoreo de rendimiento
  inicializarMonitoreoRendimiento();
  
  // 2. Inicializar debug (si est√° habilitado)
  inicializarDebug();
  
  // 3. Configurar manejo de redimensionamiento
  manejarRedimensionamiento();
  
  // 4. Inicializar escena de multitud despu√©s de un delay
  setTimeout(() => {
    inicializarEscenaMultitud();
  }, 2000);
  
  // 5. Activar efecto cortina del mapa despu√©s de un delay
  setTimeout(() => {
    activarEfectoCortinaMapa();
  }, 2500);
  
  console.log("‚úÖ Todos los m√≥dulos inicializados");
}

/**
 * Configurar eventos del sistema
 */
function configurarEventosSistema() {
  console.log("üéõÔ∏è Configurando eventos del sistema...");
  
  // Evento de carga completa de la p√°gina
  document.addEventListener('DOMContentLoaded', () => {
    console.log("üìÑ DOM completamente cargado");
  });
  
  // Evento de carga completa de recursos
  window.addEventListener('load', () => {
    console.log("üñºÔ∏è Todos los recursos cargados");
    
    // Mostrar informaci√≥n del sistema despu√©s de la carga completa
    setTimeout(() => {
      mostrarInformacionSistema();
    }, 1000);
  });
  
  // Evento de error global
  window.addEventListener('error', (event) => {
    console.error(`‚ùå Error global capturado: ${event.message}`);
    console.error(`   Archivo: ${event.filename}`);
    console.error(`   L√≠nea: ${event.lineno}`);
  });
  
  // Evento de salida de la p√°gina
  window.addEventListener('beforeunload', () => {
    console.log("üëã Cerrando aplicaci√≥n...");
  });
  
  console.log("‚úÖ Eventos del sistema configurados");
}

/**
 * Funci√≥n para mostrar estad√≠sticas de la aplicaci√≥n
 */
function mostrarEstadisticas() {
  console.log("üìä === ESTAD√çSTICAS DE LA APLICACI√ìN ===");
  console.log(`üé≠ Personaje especial: ${personajeEspecial.id}`);
  console.log(`üß± Elementos visibles: ${STATE.cuadrosVisibles}`);
  console.log(`üé¨ ScrollTriggers activos: ${ScrollTrigger.getAll().length}`);
  console.log(`üñºÔ∏è Im√°genes totales: ${PERSONAJES.length}`);
  console.log(`‚öôÔ∏è Configuraci√≥n total: ${CONFIG.total}`);
  console.log("=" .repeat(50));
}

/**
 * Funci√≥n para activar el efecto cortina del mapa
 */
function activarEfectoCortinaMapa() {
  console.log("üó∫Ô∏è Activando efecto cortina del mapa...");
  
  const mapaSvg = document.querySelector('.mapa-svg');
  if (mapaSvg) {
    // Establecer estado inicial seg√∫n dispositivo
    if (window.innerWidth > 1024) {
      // Desktop: mapa siempre visible
      mapaSvg.classList.add('visible');
      console.log("‚úÖ Efecto cortina del mapa activado para Desktop");
    } else {
      // Mobile: mapa inicialmente oculto, controlado por ScrollTrigger
      mapaSvg.classList.remove('visible');
      console.log("‚úÖ Efecto cortina del mapa configurado para Mobile (controlado por ScrollTrigger)");
    }
  } else {
    console.warn("‚ö†Ô∏è No se encontr√≥ el elemento .mapa-svg");
  }
}

/**
 * Funci√≥n de reinicio de la aplicaci√≥n
 */
function reiniciarAplicacion() {
  console.log("üîÑ Reiniciando aplicaci√≥n...");
  
  // Limpiar ScrollTriggers
  ScrollTrigger.getAll().forEach(trigger => trigger.kill());
  
  // Limpiar elementos del DOM
  const cuadros = document.querySelectorAll('.cuadro');
  cuadros.forEach(cuadro => cuadro.remove());
  
  // Reinicializar variables
  STATE.cuadrosVisibles = 0;
  STATE.personajeEspecialCreado = false;
  
  // Reinicializar personaje especial
  inicializarPersonajeEspecial();
  
  // Reinicializar aplicaci√≥n
  setTimeout(() => {
    inicializarAplicacion();
  }, 500);
  
  console.log("‚úÖ Aplicaci√≥n reiniciada");
}

// Inicializar la aplicaci√≥n cuando el DOM est√© listo
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', inicializarAplicacion);
} else {
  // El DOM ya est√° cargado
  inicializarAplicacion();
}

// Exportar funciones principales para uso global
window.inicializarAplicacion = inicializarAplicacion;
window.mostrarEstadisticas = mostrarEstadisticas;
window.reiniciarAplicacion = reiniciarAplicacion;
window.activarEfectoCortinaMapa = activarEfectoCortinaMapa; 